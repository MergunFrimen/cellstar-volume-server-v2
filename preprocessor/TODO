1) reorganizing files/folders -> almost done -> splitting sff preprocessor
2) tools -> make class for each tool, sort out what is actually tool
3) tools -> pass as dependency in the constructor of sff preprocessor
4) tests -> rewrite those that make sense (not plotting) as unittests
5) in general, several files (tools, tests) contain many public/private methods
    -> this is a bit hard to find the purpose of the file
    -> making it as a class with public methods + private methods coming from auxiliary files (example sff preprocessor)
6) tools -> one folder per tool so that it is easy to organize the tool in multiple files
7) tests -> keep json with result of "gold standard" test so that we can compare performance with changed method when writing optimizations
    -> for example we can have a bool in the test run method that makes it write the new json file overwriting the previous one
    -> bool is always committed as false, once we run tests on new code and it is better, and we decide to commit new code
    -> then we change the bool to true temporarily, run to overwrite json, change back to false, then commit json + code
8) remove files that were experiments and no longer needed (or move to _old folder)
9) some files contains no method that match the naming of the file -> review naming of files